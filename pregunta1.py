# -*- coding: utf-8 -*-
"""Pregunta1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A2-CEcaM85FjRFWbma0Cdu1rva2THD1B
"""

import resource, sys
resource.setrlimit(resource.RLIMIT_STACK, (2**29, -1))
sys.setrecursionlimit(10**7)


from collections import deque
 
def solve():
	
	dx = [1, -1, 0, 0, 1, 1, -1, -1]
	dy = [0, 0, 1, -1, 1, -1, 1, -1]
	n, m = [int(x) for x in input().split()] 
	
	mat = [[] for x in range(n)] 
	for i in range(n):
		mat[i] = list(input())
	
	vis = [[False for y in range(m)] for x in range(n)]
	
	st = deque()
 
	def valid(r, c):
		ret = (r >= 0) and (r < n)
		ret = ret and (c >= 0) and (c < m)
		if not ret: return False ### Se sale de los lÃ­mites de mi matriz
		ret = ret and (mat[r][c] == '@') and (not vis[r][c])
		return ret
	
	def dfs(r, c): #r: row, c: column
		vis[r][c] = True
		st.append((r, c))
		while len(st):
			r, c = st.popleft()
			vis[r][c] = True
			for i in range(8):
				nr, nc = r + dx[i], c + dy[i]
				if valid(nr, nc):
					vis[nr][nc] = True
					st.append((nr, nc))
	red = 0
	for i in range(n):
		for j in range(m):
			if (mat[i][j] == '@') and (not vis[i][j]):
				red += 1
				dfs(i, j)
	return red
				
print(solve())